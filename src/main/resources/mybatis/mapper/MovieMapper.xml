<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.movie.repository.MoiveRepository">

    <!-- 리턴타입이 entity등의 클래스로 구성된 경우 패키지명부터 적어준다 -->
    <select id="findAll" resultType="com.spring.movie.entity.Moive">
        SELECT
            user_id as userId,
            uname,
            movie_title as movieTitle,
            movie_content as movieContent,
            published_at as publishedAt,
            updated_at as updatedAt
        FROM
            movie
        ORDER BY user_id DESC
    </select>

    <!-- 위 select 태그를 참조해 방금 만든 findByID를 연결해주시고, 리턴자료도 매칭해주세요. -->
    <select id="findById" resultType="com.spring.movie.entity.Movie">
        SELECT
            user_id as userId,
            uname,
            movie_title as movieTitle,
            movie_content as movieContent,
            published_at as publishedAt,
            updated_at as updatedAt
        FROM
            movie
        WHERE
            user_id = #{userId}
    </select>

    <!-- insert 태그를 이용해서 사전 세팅만 해주세요 -->
    <insert id="save" parameterType="com.spring.movie.entity.Movie">
        INSERT INTO
            blog (uname, movie_title, movie_content)
        VALUES
            (#{uname}, #{movieTitle}, #{movieContent})
    </insert>

    <!-- delete 태그를 이용해서 deleteById 메서드를 구현해주세요 -->
    <delete id="deleteById" parameterType="long">
        DELETE FROM
            movie
        WHERE
            user_id = #{userId}
    </delete>

    <!-- 수정로직을 아래에 쿼리문까지 작성해주세요,
        바꿔줘야 하는 항목은 제목, 본문, 업데이트시각 -->
    <update id="update" parameterType="com.spring.movie.entity.Movie">
        UPDATE
            movie
        SET
            movie_title = #{movieTitle},
            movie_content = #{movieContent},
            updated_at = now()
        WHERE
            user_id = #{userId}
    </update>


    <!-- 테스트를 위한 쿼리문들 -->
    <update id="createBlogTable">
        CREATE TABLE IF NOT EXISTS movie(
                                            user_id int auto_increment primary key,
                                            uname varchar(16) not null,
            movie_title varchar(200) not null,
            movie_content varchar(4000) not null,
            published_at datetime default now(),
            updated_at datetime default now()
            )
    </update>
    <update id="dropBlogTable">
        DROP TABLE movie
    </update>

    <insert id="insertTestData">
        INSERT INTO movie VALUES
                              (null, '첫번째유저', '파묘', '생각보다 안 무섭당', now(), now(), null),
                              (null, '2번유저', '2번제목', '2번본문', now(), now(), null),
                              (null, '3번유저', '3번제목', '3번본문', now(), now(), null)
    </insert>
</mapper>